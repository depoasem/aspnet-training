//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoApps
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DemoDBEntities1 : DbContext
    {
        public DemoDBEntities1()
            : base("name=DemoDBEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MasterEvent> MasterEvents { get; set; }
        public virtual DbSet<Participant> Participants { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
    
        public virtual int deleteParticipant(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteParticipant", iDParameter);
        }
    
        public virtual int editParticipant(Nullable<int> iD, string namaLengkap, string email, string hP, Nullable<bool> attend, Nullable<int> masterEventID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var namaLengkapParameter = namaLengkap != null ?
                new ObjectParameter("NamaLengkap", namaLengkap) :
                new ObjectParameter("NamaLengkap", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var hPParameter = hP != null ?
                new ObjectParameter("HP", hP) :
                new ObjectParameter("HP", typeof(string));
    
            var attendParameter = attend.HasValue ?
                new ObjectParameter("Attend", attend) :
                new ObjectParameter("Attend", typeof(bool));
    
            var masterEventIDParameter = masterEventID.HasValue ?
                new ObjectParameter("MasterEventID", masterEventID) :
                new ObjectParameter("MasterEventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editParticipant", iDParameter, namaLengkapParameter, emailParameter, hPParameter, attendParameter, masterEventIDParameter);
        }
    
        public virtual ObjectResult<getAllParticipant_Result> getAllParticipant()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllParticipant_Result>("getAllParticipant");
        }
    
        public virtual ObjectResult<getParticipantByID_Result> getParticipantByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getParticipantByID_Result>("getParticipantByID", iDParameter);
        }
    
        public virtual int insertParticipant(string namaLengkap, string email, string hP, Nullable<bool> attend, Nullable<int> masterEventID)
        {
            var namaLengkapParameter = namaLengkap != null ?
                new ObjectParameter("NamaLengkap", namaLengkap) :
                new ObjectParameter("NamaLengkap", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var hPParameter = hP != null ?
                new ObjectParameter("HP", hP) :
                new ObjectParameter("HP", typeof(string));
    
            var attendParameter = attend.HasValue ?
                new ObjectParameter("Attend", attend) :
                new ObjectParameter("Attend", typeof(bool));
    
            var masterEventIDParameter = masterEventID.HasValue ?
                new ObjectParameter("MasterEventID", masterEventID) :
                new ObjectParameter("MasterEventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertParticipant", namaLengkapParameter, emailParameter, hPParameter, attendParameter, masterEventIDParameter);
        }
    
        public virtual int deleteUser(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteUser", iDParameter);
        }
    
        public virtual int editUser(Nullable<int> iD, string username, string password, string email, string name, string role)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editUser", iDParameter, usernameParameter, passwordParameter, emailParameter, nameParameter, roleParameter);
        }
    
        public virtual ObjectResult<getAllUser_Result> getAllUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllUser_Result>("getAllUser");
        }
    
        public virtual ObjectResult<getUserByID_Result> getUserByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUserByID_Result>("getUserByID", iDParameter);
        }
    
        public virtual int insertUser(string username, string password, string email, string name, string role)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertUser", usernameParameter, passwordParameter, emailParameter, nameParameter, roleParameter);
        }
    
        public virtual ObjectResult<checkUser_Result> checkUser(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<checkUser_Result>("checkUser", usernameParameter, passwordParameter);
        }
    }
}
